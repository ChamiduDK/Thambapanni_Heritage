<?php
// Turn off all error reporting and output buffering to prevent corruption of JSON
ini_set('display_errors', 0);
ini_set('display_startup_errors', 0);
error_reporting(0);

// Start output buffering to catch any unexpected output
ob_start();

session_start();

// Database connection
$host = '127.0.0.1:3306';
$username = 'u866533411_chamidudhilsha';
$password = 'qazwsx123ED@#';
$dbname = 'u866533411_chamidudhilsha';
$connection = new mysqli($host, $username, $password, $dbname);
if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}

// Load Stripe library (only needed for Stripe payment option)
if (!file_exists('vendor/autoload.php')) {
    die("Error: 'vendor/autoload.php' not found. Please upload the 'vendor' folder generated by Composer for Stripe payments.");
}
require_once 'vendor/autoload.php';
\Stripe\Stripe::setApiKey('');

// Check if user is logged in
if (!isset($_SESSION['customer_id'])) {
    header("Location: customer_login.php");
    exit;
}

$customer_id = $_SESSION['customer_id'];

// Handle adding to cart with quantity check
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_to_cart'])) {
    $product_id = intval($_POST['product_id']);
    $quantity = intval($_POST['quantity']);

    // Check product availability
    $stmt = $connection->prepare("SELECT quantity, name FROM products WHERE id = ?");
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $product = $stmt->get_result()->fetch_assoc();
    $stmt->close();

    if ($product) {
        if ($product['quantity'] < $quantity) {
            $error_message = "Insufficient stock for " . htmlspecialchars($product['name']) . ". Available: " . $product['quantity'];
        } else {
            // Check if item already exists in cart
            $check_stmt = $connection->prepare("SELECT id, quantity FROM cart WHERE customer_id = ? AND product_id = ? AND type = 'product'");
            $check_stmt->bind_param("ii", $customer_id, $product_id);
            $check_stmt->execute();
            $existing = $check_stmt->get_result()->fetch_assoc();
            $check_stmt->close();

            if ($existing) {
                $new_quantity = $existing['quantity'] + $quantity;
                if ($product['quantity'] < $new_quantity) {
                    $error_message = "Total quantity exceeds available stock for " . htmlspecialchars($product['name']) . ". Available: " . $product['quantity'];
                } else {
                    $update_stmt = $connection->prepare("UPDATE cart SET quantity = ? WHERE id = ?");
                    $update_stmt->bind_param("ii", $new_quantity, $existing['id']);
                    $update_stmt->execute();
                    $update_stmt->close();
                    $success_message = "Cart updated successfully!";
                }
            } else {
                $insert_stmt = $connection->prepare("INSERT INTO cart (customer_id, product_id, type, quantity) VALUES (?, ?, 'product', ?)");
                $insert_stmt->bind_param("iii", $customer_id, $product_id, $quantity);
                $insert_stmt->execute();
                $insert_stmt->close();
                $success_message = "Product added to cart successfully!";
            }
        }
    } else {
        $error_message = "Product not found.";
    }
    header("Location: cart.php" . (isset($success_message) ? "?success=" . urlencode($success_message) : "?error=" . urlencode($error_message)));
    exit;
}

// Handle item removal
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['remove_item'])) {
    $cart_id = intval($_POST['cart_id']);
    $stmt = $connection->prepare("DELETE FROM cart WHERE id = ? AND customer_id = ?");
    $stmt->bind_param("ii", $cart_id, $customer_id);
    $stmt->execute();
    $stmt->close();
    header("Location: cart.php?success=Item removed from cart!");
    exit;
}

// Fetch cart items with seller details
$query = "
    SELECT c.*, 
           CASE 
               WHEN c.type = 'product' THEN p.name 
               WHEN c.type = 'gig' THEN g.title 
           END AS item_name,
           CASE 
               WHEN c.type = 'product' THEN p.price 
               WHEN c.type = 'gig' THEN gr.price 
           END AS price,
           c.type,
           p.image AS product_image,
           g.image AS gig_image,
           CASE 
               WHEN c.type = 'product' THEN pu.username 
               WHEN c.type = 'gig' THEN gu.username 
           END AS seller_username,
           p.quantity AS product_quantity
    FROM cart c
    LEFT JOIN products p ON c.product_id = p.id AND c.type = 'product'
    LEFT JOIN users pu ON p.user_id = pu.id AND c.type = 'product'
    LEFT JOIN gig_requests gr ON c.gig_request_id = gr.id AND c.type = 'gig'
    LEFT JOIN gigs g ON gr.gig_id = g.id AND c.type = 'gig'
    LEFT JOIN users gu ON g.user_id = gu.id AND c.type = 'gig'
    WHERE c.customer_id = ?
";
$stmt = $connection->prepare($query);
if ($stmt === false) {
    die("Cart query prepare failed: " . $connection->error);
}
$stmt->bind_param("i", $customer_id);
$stmt->execute();
$result = $stmt->get_result();
$cart_items = $result->fetch_all(MYSQLI_ASSOC);
$stmt->close();

// Handle checkout (Stripe or COD)
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'create_checkout') {
    ob_clean();
    header('Content-Type: application/json');
    
    try {
        if (empty($cart_items)) {
            echo json_encode(['error' => 'Your cart is empty!']);
            exit;
        }

        // Get shipping details and payment method from POST
        $full_name = trim($_POST['full_name'] ?? '');
        $address = trim($_POST['address'] ?? '');
        $city = trim($_POST['city'] ?? '');
        $postal_code = trim($_POST['postal_code'] ?? '');
        $phone = trim($_POST['phone'] ?? '');
        $payment_method = trim($_POST['payment_method'] ?? '');
        
        if (empty($full_name) || empty($address) || empty($city) || empty($postal_code) || empty($phone)) {
            echo json_encode(['error' => 'All shipping details are required!']);
            exit;
        }
        if (!in_array($payment_method, ['stripe', 'cod'])) {
            echo json_encode(['error' => 'Invalid payment method selected!']);
            exit;
        }

        // Check stock availability before proceeding
        foreach ($cart_items as $item) {
            if ($item['type'] === 'product' && $item['product_quantity'] < $item['quantity']) {
                echo json_encode(['error' => "Insufficient stock for " . htmlspecialchars($item['item_name']) . ". Available: " . $item['product_quantity']]);
                exit;
            }
        }

        $grand_total = 0;
        foreach ($cart_items as $item) {
            $grand_total += $item['price'] * $item['quantity'];
        }

        $connection->begin_transaction();

        // Insert order with shipping details
        $stmt = $connection->prepare("INSERT INTO orders (customer_id, total_amount, status, shipping_name, shipping_address, shipping_city, shipping_postal_code, shipping_phone, payment_method) VALUES (?, ?, 'pending', ?, ?, ?, ?, ?, ?)");
        $stmt->bind_param("idssssss", $customer_id, $grand_total, $full_name, $address, $city, $postal_code, $phone, $payment_method);
        $stmt->execute();
        $order_id = $connection->insert_id;

        // Insert order items
        $stmt = $connection->prepare("INSERT INTO order_items (order_id, item_name, type, price, quantity, seller_username, product_id) VALUES (?, ?, ?, ?, ?, ?, ?)");
        foreach ($cart_items as $item) {
            if (empty($item['seller_username'])) {
                throw new Exception("Seller username missing for item: " . $item['item_name']);
            }
            $product_id = $item['type'] === 'product' ? $item['product_id'] : null;
            $stmt->bind_param("issdisi", $order_id, $item['item_name'], $item['type'], $item['price'], $item['quantity'], $item['seller_username'], $product_id);
            $stmt->execute();
        }

        if ($payment_method === 'stripe') {
            // Stripe payment processing
            $line_items = [];
            foreach ($cart_items as $item) {
                $image = $item['type'] === 'product' ? $item['product_image'] : $item['gig_image'];
                $product_data = ['name' => $item['item_name']];
                if (!empty($image)) {
                    $product_data['images'] = [$image];
                }

                $line_items[] = [
                    'price_data' => [
                        'currency' => 'lkr',
                        'product_data' => $product_data,
                        'unit_amount' => (int)($item['price'] * 100),
                    ],
                    'quantity' => (int)$item['quantity'],
                ];
            }

             // Create Stripe session
        $session = \Stripe\Checkout\Session::create([
            'payment_method_types' => ['card'],
            'line_items' => $line_items,
            'mode' => 'payment',
            'success_url' => 'https://deepskyblue-lobster-260457.hostingersite.com/cart.php?session_id={CHECKOUT_SESSION_ID}',
            'cancel_url' => 'https://deepskyblue-lobster-260457.hostingersite.com/cart.php',
        ]);

            $stmt = $connection->prepare("UPDATE orders SET stripe_session_id = ? WHERE id = ?");
            $stmt->bind_param("si", $session->id, $order_id);
            $stmt->execute();

            $connection->commit();

            $_SESSION['cart_items'] = $cart_items;
            $_SESSION['grand_total'] = $grand_total;
            $_SESSION['pending_order_id'] = $order_id;
            $_SESSION['shipping_details'] = [
                'full_name' => $full_name,
                'address' => $address,
                'city' => $city,
                'postal_code' => $postal_code,
                'phone' => $phone
            ];

            echo json_encode(['sessionId' => $session->id]);
        } else { // COD
            // Clear cart and commit order for COD
            $stmt = $connection->prepare("DELETE FROM cart WHERE customer_id = ?");
            $stmt->bind_param("i", $customer_id);
            $stmt->execute();

            $connection->commit();

            $_SESSION['cod_order_id'] = $order_id;
            echo json_encode(['success' => 'Order placed successfully with Cash on Delivery! Order ID: #' . $order_id]);
        }
    } catch (\Stripe\Exception\ApiErrorException $e) {
        $connection->rollback();
        echo json_encode(['error' => 'Stripe API error: ' . $e->getMessage()]);
    } catch (Exception $e) {
        $connection->rollback();
        echo json_encode(['error' => 'Error: ' . $e->getMessage()]);
    }
    exit;
}

// Handle Stripe payment confirmation
if (isset($_GET['session_id'])) {
    try {
        $session = \Stripe\Checkout\Session::retrieve($_GET['session_id']);
        if ($session->payment_status === 'paid') {
            $connection->begin_transaction();

            $order_id = $_SESSION['pending_order_id'];
            $stmt = $connection->prepare("UPDATE orders SET status = 'paid' WHERE id = ? AND stripe_session_id = ?");
            $stmt->bind_param("is", $order_id, $_GET['session_id']);
            $stmt->execute();

            $stmt = $connection->prepare("DELETE FROM cart WHERE customer_id = ?");
            $stmt->bind_param("i", $customer_id);
            $stmt->execute();

            $connection->commit();

            unset($_SESSION['cart_items']);
            unset($_SESSION['grand_total']);
            unset($_SESSION['pending_order_id']);
            unset($_SESSION['shipping_details']);

            $success_message = "Payment successful! Your order has been placed. Order ID: #$order_id";
        } else {
            $error_message = "Payment failed or not completed. Order remains pending.";
        }
    } catch (Exception $e) {
        $connection->rollback();
        $error_message = "An error occurred: " . $e->getMessage();
    }
}

// Handle COD success message
if (isset($_SESSION['cod_order_id'])) {
    $success_message = "Order placed successfully with Cash on Delivery! Order ID: #" . $_SESSION['cod_order_id'];
    unset($_SESSION['cod_order_id']);
}

$connection->close();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thambapanni Heritage - Cart</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <script src="https://js.stripe.com/v3/"></script>
    <style>
        :root {
            --saffron: #FF9933;
            --green: #00843D;
            --maroon: #8C2A3C;
            --gold: #FFC107;
            --white: #FFFFFF;
            --gray: #F5F5F5;
            --dark-maroon: #5C1A28;
            --light-saffron: #FFDAB3;
            --shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, var(--gray) 0%, var(--white) 100%);
            color: var(--dark-maroon);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .main-content {
            padding: 20px;
            width: 100%;
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
        }

        h1 {
            color: var(--maroon);
            font-size: 2rem;
            margin: 10px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .content-sections {
            background: var(--white);
            border-radius: 15px;
            box-shadow: var(--shadow);
            padding: 20px;
        }

        .cart-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        .cart-table th, .cart-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid var(--light-saffron);
        }

        .cart-table th {
            background: var(--saffron);
            color: var(--dark-maroon);
        }

        .cart-table img {
            max-width: 50px;
            border-radius: 5px;
        }

        .remove-btn {
            background: var(--maroon);
            color: var(--white);
            padding: 5px 10px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: var(--transition);
        }

        .remove-btn:hover {
            background: var(--dark-maroon);
        }

        .button-group {
            text-align: right;
        }

        button {
            background: var(--green);
            color: var(--white);
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        button:hover {
            background: var(--gold);
            color: var(--dark-maroon);
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            text-align: center;
            border-radius: 5px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }

        .form-group {
            margin-bottom: 15px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .submit-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
        }

        .submit-btn:hover {
            background-color: #45a049;
        }

        h2 {
            margin-top: 0;
            margin-bottom: 20px;
            color: #333;
        }

        .success {
            background: var(--green);
            color: var(--white);
            padding: 12px;
            margin: 15px 0;
            border-radius: 8px;
            text-align: center;
        }

        .error {
            background: var(--light-saffron);
            color: var(--dark-maroon);
            padding: 12px;
            margin: 15px 0;
            border-radius: 8px;
            text-align: center;
        }

        @media (max-width: 768px) {
            .cart-table {
                font-size: 0.9rem;
            }
            button {
                width: 100%;
            }
        }
        * Header Navigation */
.nav {
    background: linear-gradient(to right, var(--maroon), var(--dark-maroon));
    padding: 25px;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    flex-wrap: wrap;
    position: sticky;
    top: 0;
    z-index: 1000;
    box-shadow: var(--shadow);
    transition: var(--transition);
}

.nav-toggle {
    display: none;
    font-size: 1.5rem;
    color: var(--white);
    background: none;
    border: none;
    cursor: pointer;
    padding: 10px;
}

.nav a {
    color: var(--maroon);
    text-decoration: none;
    font-size: 1rem;
    background-color: #ff9933;
    padding: 10px 20px;
    transition: var(--transition);
    border-radius: 25px;
    margin: 20px;
    
}

.nav a:hover {
    background: var(--gold);
    color: var(--dark-maroon);
}

    </style>
</head>
<body>
    <br>
    <div class="nav">
            <button class="nav-toggle" style="background-color: #ff9933"><i class="fas fa-bars"></i></button>
        
         <a href="shop.php">Back</a>
            
        </div>
    <div class="main-content">
        <div class="header">
            <h1>Your Cart</h1>
        </div>

        <?php if (isset($_GET['success'])) { ?>
            <div class="success"><?php echo htmlspecialchars($_GET['success']); ?></div>
        <?php } elseif (isset($_GET['error'])) { ?>
            <div class="error"><?php echo htmlspecialchars($_GET['error']); ?></div>
        <?php } elseif (isset($success_message)) { ?>
            <div class="success"><?php echo htmlspecialchars($success_message); ?></div>
        <?php } elseif (isset($error_message)) { ?>
            <div class="error"><?php echo htmlspecialchars($error_message); ?></div>
        <?php } ?>

        <div class="content-sections">
            <?php if (empty($cart_items)) { ?>
                <p>Your cart is empty.</p>
            <?php } else { ?>
                <table class="cart-table">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Type</th>
                            <th>Seller</th>
                            <th>Price (LKR)</th>
                            <th>Quantity</th>
                            <th>Total</th>
                            <th>Image</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php $grand_total = 0; ?>
                        <?php foreach ($cart_items as $item) { ?>
                            <tr>
                                <td><?php echo htmlspecialchars($item['item_name']); ?></td>
                                <td><?php echo htmlspecialchars($item['type']); ?></td>
                                <td><?php echo htmlspecialchars($item['seller_username']); ?></td>
                                <td><?php echo number_format($item['price'], 2); ?></td>
                                <td><?php echo htmlspecialchars($item['quantity']); ?></td>
                                <td><?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>
                                <td>
                                    <?php if ($item['type'] === 'product' && !empty($item['product_image'])) { ?>
                                        <img src="<?php echo htmlspecialchars($item['product_image']); ?>" alt="Product Image">
                                    <?php } elseif ($item['type'] === 'gig' && !empty($item['gig_image'])) { ?>
                                        <img src="<?php echo htmlspecialchars($item['gig_image']); ?>" alt="Gig Image">
                                    <?php } else { ?>
                                        <div>No Image</div>
                                    <?php } ?>
                                </td>
                                <td>
                                    <form method="POST" style="display:inline;">
                                        <input type="hidden" name="cart_id" value="<?php echo $item['id']; ?>">
                                        <button type="submit" name="remove_item" class="remove-btn">
                                            <i class="fas fa-trash-alt"></i> Remove
                                        </button>
                                    </form>
                                </td>
                            </tr>
                            <?php $grand_total += $item['price'] * $item['quantity']; ?>
                        <?php } ?>
                        <tr>
                            <td colspan="5" style="text-align: right;"><strong>Grand Total:</strong></td>
                            <td><strong>LKR <?php echo number_format($grand_total, 2); ?></strong></td>
                            <td colspan="2"></td>
                        </tr>
                    </tbody>
                </table>
                <div class="button-group">
                    <button type="button" id="checkout-button">Proceed to Checkout <i class="fas fa-credit-card"></i></button>
                </div>
            <?php } ?>
        </div>
    </div>

    <!-- Shipping details and payment method modal -->
    <div id="shipping-modal" class="modal">
        <div class="modal-content">
            <span class="close" id="closeShippingModal">×</span>
            <h2>Shipping Details & Payment</h2>
            <form id="shipping-form">
                <div class="form-group">
                    <label for="full_name">Full Name:</label>
                    <input type="text" id="full_name" name="full_name" required>
                </div>
                <div class="form-group">
                    <label for="address">Address:</label>
                    <textarea id="address" name="address" required></textarea>
                </div>
                <div class="form-group">
                    <label for="city">City:</label>
                    <input type="text" id="city" name="city" required>
                </div>
                <div class="form-group">
                    <label for="postal_code">Postal Code:</label>
                    <input type="text" id="postal_code" name="postal_code" required>
                </div>
                <div class="form-group">
                    <label for="phone">Phone Number:</label>
                    <input type="tel" id="phone" name="phone" required>
                </div>
                <div class="form-group">
                    <label for="payment_method">Payment Method:</label>
                    <select id="payment_method" name="payment_method" required>
                        <option value="">Select Payment Method</option>
                        <option value="stripe">Credit/Debit Card (Stripe)</option>
                        <option value="cod">Cash on Delivery</option>
                    </select>
                </div>
                <button type="submit" class="submit-btn">Confirm Order</button>
            </form>
        </div>
    </div>

    <div id="message-modal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close">×</span>
            <p id="message-text"></p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const checkoutButton = document.getElementById('checkout-button');
            const shippingModal = document.getElementById('shipping-modal');
            const closeShippingModal = document.getElementById('closeShippingModal');
            const shippingForm = document.getElementById('shipping-form');
            const stripe = Stripe('');

            if (checkoutButton) {
                checkoutButton.addEventListener('click', function() {
                    shippingModal.style.display = 'block';
                });
            }

            closeShippingModal.onclick = function() {
                shippingModal.style.display = 'none';
            };

            window.onclick = function(event) {
                if (event.target == shippingModal) {
                    shippingModal.style.display = 'none';
                }
                if (event.target == document.getElementById('message-modal')) {
                    document.getElementById('message-modal').style.display = 'none';
                    window.location.href = 'cart.php';
                }
            };

            if (shippingForm) {
                shippingForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(shippingForm);
                    formData.append('action', 'create_checkout');
                    
                    fetch('cart.php', {
                        method: 'POST',
                        body: new URLSearchParams(formData)
                    })
                    .then(response => {
                        return response.text().then(text => {
                            try {
                                const data = JSON.parse(text);
                                return data;
                            } catch (e) {
                                console.error("JSON parse error:", e);
                                console.log("Raw response:", text);
                                throw new Error('Server returned invalid JSON: ' + text.substring(0, 100));
                            }
                        });
                    })
                    .then(data => {
                        if (data.error) {
                            showModal(data.error, true);
                        } else if (data.sessionId) {
                            // Stripe payment
                            stripe.redirectToCheckout({ sessionId: data.sessionId });
                        } else if (data.success) {
                            // COD success
                            showModal(data.success, false);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showModal('An error occurred: ' + error.message, true);
                    });
                });
            }

            <?php if (isset($success_message)) { ?>
                showModal(<?php echo json_encode($success_message); ?>, false);
            <?php } elseif (isset($error_message)) { ?>
                showModal(<?php echo json_encode($error_message); ?>, true);
            <?php } ?>

            function showModal(message, isError) {
                const modal = document.getElementById('message-modal');
                const messageText = document.getElementById('message-text');
                messageText.textContent = message;
                messageText.style.color = isError ? 'red' : 'green';
                modal.style.display = 'block';

                const closeBtn = modal.querySelector('.close');
                closeBtn.onclick = function() {
                    modal.style.display = 'none';
                    if (!isError) {
                        window.location.href = 'cart.php';
                    }
                };
            }
        });
    </script>
</body>
</html><?php
// Turn off all error reporting and output buffering to prevent corruption of JSON
ini_set('display_errors', 0);
ini_set('display_startup_errors', 0);
error_reporting(0);

// Start output buffering to catch any unexpected output
ob_start();

session_start();

// Database connection
$host = '127.0.0.1:3306';
$username = 'u866533411_chamidudhilsha';
$password = 'qazwsx123ED@#';
$dbname = 'u866533411_chamidudhilsha';
$connection = new mysqli($host, $username, $password, $dbname);
if ($connection->connect_error) {
    die("Connection failed: " . $connection->connect_error);
}

// Load Stripe library (only needed for Stripe payment option)
if (!file_exists('vendor/autoload.php')) {
    die("Error: 'vendor/autoload.php' not found. Please upload the 'vendor' folder generated by Composer for Stripe payments.");
}
require_once 'vendor/autoload.php';
\Stripe\Stripe::setApiKey('');

// Check if user is logged in
if (!isset($_SESSION['customer_id'])) {
    header("Location: customer_login.php");
    exit;
}

$customer_id = $_SESSION['customer_id'];

// Handle adding to cart with quantity check
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['add_to_cart'])) {
    $product_id = intval($_POST['product_id']);
    $quantity = intval($_POST['quantity']);

    // Check product availability
    $stmt = $connection->prepare("SELECT quantity, name FROM products WHERE id = ?");
    $stmt->bind_param("i", $product_id);
    $stmt->execute();
    $product = $stmt->get_result()->fetch_assoc();
    $stmt->close();

    if ($product) {
        if ($product['quantity'] < $quantity) {
            $error_message = "Insufficient stock for " . htmlspecialchars($product['name']) . ". Available: " . $product['quantity'];
        } else {
            // Check if item already exists in cart
            $check_stmt = $connection->prepare("SELECT id, quantity FROM cart WHERE customer_id = ? AND product_id = ? AND type = 'product'");
            $check_stmt->bind_param("ii", $customer_id, $product_id);
            $check_stmt->execute();
            $existing = $check_stmt->get_result()->fetch_assoc();
            $check_stmt->close();

            if ($existing) {
                $new_quantity = $existing['quantity'] + $quantity;
                if ($product['quantity'] < $new_quantity) {
                    $error_message = "Total quantity exceeds available stock for " . htmlspecialchars($product['name']) . ". Available: " . $product['quantity'];
                } else {
                    $update_stmt = $connection->prepare("UPDATE cart SET quantity = ? WHERE id = ?");
                    $update_stmt->bind_param("ii", $new_quantity, $existing['id']);
                    $update_stmt->execute();
                    $update_stmt->close();
                    $success_message = "Cart updated successfully!";
                }
            } else {
                $insert_stmt = $connection->prepare("INSERT INTO cart (customer_id, product_id, type, quantity) VALUES (?, ?, 'product', ?)");
                $insert_stmt->bind_param("iii", $customer_id, $product_id, $quantity);
                $insert_stmt->execute();
                $insert_stmt->close();
                $success_message = "Product added to cart successfully!";
            }
        }
    } else {
        $error_message = "Product not found.";
    }
    header("Location: cart.php" . (isset($success_message) ? "?success=" . urlencode($success_message) : "?error=" . urlencode($error_message)));
    exit;
}

// Handle item removal
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['remove_item'])) {
    $cart_id = intval($_POST['cart_id']);
    $stmt = $connection->prepare("DELETE FROM cart WHERE id = ? AND customer_id = ?");
    $stmt->bind_param("ii", $cart_id, $customer_id);
    $stmt->execute();
    $stmt->close();
    header("Location: cart.php?success=Item removed from cart!");
    exit;
}

// Fetch cart items with seller details
$query = "
    SELECT c.*, 
           CASE 
               WHEN c.type = 'product' THEN p.name 
               WHEN c.type = 'gig' THEN g.title 
           END AS item_name,
           CASE 
               WHEN c.type = 'product' THEN p.price 
               WHEN c.type = 'gig' THEN gr.price 
           END AS price,
           c.type,
           p.image AS product_image,
           g.image AS gig_image,
           CASE 
               WHEN c.type = 'product' THEN pu.username 
               WHEN c.type = 'gig' THEN gu.username 
           END AS seller_username,
           p.quantity AS product_quantity
    FROM cart c
    LEFT JOIN products p ON c.product_id = p.id AND c.type = 'product'
    LEFT JOIN users pu ON p.user_id = pu.id AND c.type = 'product'
    LEFT JOIN gig_requests gr ON c.gig_request_id = gr.id AND c.type = 'gig'
    LEFT JOIN gigs g ON gr.gig_id = g.id AND c.type = 'gig'
    LEFT JOIN users gu ON g.user_id = gu.id AND c.type = 'gig'
    WHERE c.customer_id = ?
";
$stmt = $connection->prepare($query);
if ($stmt === false) {
    die("Cart query prepare failed: " . $connection->error);
}
$stmt->bind_param("i", $customer_id);
$stmt->execute();
$result = $stmt->get_result();
$cart_items = $result->fetch_all(MYSQLI_ASSOC);
$stmt->close();

// Handle checkout (Stripe or COD)
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'create_checkout') {
    ob_clean();
    header('Content-Type: application/json');
    
    try {
        if (empty($cart_items)) {
            echo json_encode(['error' => 'Your cart is empty!']);
            exit;
        }

        // Get shipping details and payment method from POST
        $full_name = trim($_POST['full_name'] ?? '');
        $address = trim($_POST['address'] ?? '');
        $city = trim($_POST['city'] ?? '');
        $postal_code = trim($_POST['postal_code'] ?? '');
        $phone = trim($_POST['phone'] ?? '');
        $payment_method = trim($_POST['payment_method'] ?? '');
        
        if (empty($full_name) || empty($address) || empty($city) || empty($postal_code) || empty($phone)) {
            echo json_encode(['error' => 'All shipping details are required!']);
            exit;
        }
        if (!in_array($payment_method, ['stripe', 'cod'])) {
            echo json_encode(['error' => 'Invalid payment method selected!']);
            exit;
        }

        // Check stock availability before proceeding
        foreach ($cart_items as $item) {
            if ($item['type'] === 'product' && $item['product_quantity'] < $item['quantity']) {
                echo json_encode(['error' => "Insufficient stock for " . htmlspecialchars($item['item_name']) . ". Available: " . $item['product_quantity']]);
                exit;
            }
        }

        $grand_total = 0;
        foreach ($cart_items as $item) {
            $grand_total += $item['price'] * $item['quantity'];
        }

        $connection->begin_transaction();

        // Insert order with shipping details
        $stmt = $connection->prepare("INSERT INTO orders (customer_id, total_amount, status, shipping_name, shipping_address, shipping_city, shipping_postal_code, shipping_phone, payment_method) VALUES (?, ?, 'pending', ?, ?, ?, ?, ?, ?)");
        $stmt->bind_param("idssssss", $customer_id, $grand_total, $full_name, $address, $city, $postal_code, $phone, $payment_method);
        $stmt->execute();
        $order_id = $connection->insert_id;

        // Insert order items
        $stmt = $connection->prepare("INSERT INTO order_items (order_id, item_name, type, price, quantity, seller_username, product_id) VALUES (?, ?, ?, ?, ?, ?, ?)");
        foreach ($cart_items as $item) {
            if (empty($item['seller_username'])) {
                throw new Exception("Seller username missing for item: " . $item['item_name']);
            }
            $product_id = $item['type'] === 'product' ? $item['product_id'] : null;
            $stmt->bind_param("issdisi", $order_id, $item['item_name'], $item['type'], $item['price'], $item['quantity'], $item['seller_username'], $product_id);
            $stmt->execute();
        }

        if ($payment_method === 'stripe') {
            // Stripe payment processing
            $line_items = [];
            foreach ($cart_items as $item) {
                $image = $item['type'] === 'product' ? $item['product_image'] : $item['gig_image'];
                $product_data = ['name' => $item['item_name']];
                if (!empty($image)) {
                    $product_data['images'] = [$image];
                }

                $line_items[] = [
                    'price_data' => [
                        'currency' => 'lkr',
                        'product_data' => $product_data,
                        'unit_amount' => (int)($item['price'] * 100),
                    ],
                    'quantity' => (int)$item['quantity'],
                ];
            }

             // Create Stripe session
        $session = \Stripe\Checkout\Session::create([
            'payment_method_types' => ['card'],
            'line_items' => $line_items,
            'mode' => 'payment',
            'success_url' => 'https://deepskyblue-lobster-260457.hostingersite.com/cart.php?session_id={CHECKOUT_SESSION_ID}',
            'cancel_url' => 'https://deepskyblue-lobster-260457.hostingersite.com/cart.php',
        ]);

            $stmt = $connection->prepare("UPDATE orders SET stripe_session_id = ? WHERE id = ?");
            $stmt->bind_param("si", $session->id, $order_id);
            $stmt->execute();

            $connection->commit();

            $_SESSION['cart_items'] = $cart_items;
            $_SESSION['grand_total'] = $grand_total;
            $_SESSION['pending_order_id'] = $order_id;
            $_SESSION['shipping_details'] = [
                'full_name' => $full_name,
                'address' => $address,
                'city' => $city,
                'postal_code' => $postal_code,
                'phone' => $phone
            ];

            echo json_encode(['sessionId' => $session->id]);
        } else { // COD
            // Clear cart and commit order for COD
            $stmt = $connection->prepare("DELETE FROM cart WHERE customer_id = ?");
            $stmt->bind_param("i", $customer_id);
            $stmt->execute();

            $connection->commit();

            $_SESSION['cod_order_id'] = $order_id;
            echo json_encode(['success' => 'Order placed successfully with Cash on Delivery! Order ID: #' . $order_id]);
        }
    } catch (\Stripe\Exception\ApiErrorException $e) {
        $connection->rollback();
        echo json_encode(['error' => 'Stripe API error: ' . $e->getMessage()]);
    } catch (Exception $e) {
        $connection->rollback();
        echo json_encode(['error' => 'Error: ' . $e->getMessage()]);
    }
    exit;
}

// Handle Stripe payment confirmation
if (isset($_GET['session_id'])) {
    try {
        $session = \Stripe\Checkout\Session::retrieve($_GET['session_id']);
        if ($session->payment_status === 'paid') {
            $connection->begin_transaction();

            $order_id = $_SESSION['pending_order_id'];
            $stmt = $connection->prepare("UPDATE orders SET status = 'paid' WHERE id = ? AND stripe_session_id = ?");
            $stmt->bind_param("is", $order_id, $_GET['session_id']);
            $stmt->execute();

            $stmt = $connection->prepare("DELETE FROM cart WHERE customer_id = ?");
            $stmt->bind_param("i", $customer_id);
            $stmt->execute();

            $connection->commit();

            unset($_SESSION['cart_items']);
            unset($_SESSION['grand_total']);
            unset($_SESSION['pending_order_id']);
            unset($_SESSION['shipping_details']);

            $success_message = "Payment successful! Your order has been placed. Order ID: #$order_id";
        } else {
            $error_message = "Payment failed or not completed. Order remains pending.";
        }
    } catch (Exception $e) {
        $connection->rollback();
        $error_message = "An error occurred: " . $e->getMessage();
    }
}

// Handle COD success message
if (isset($_SESSION['cod_order_id'])) {
    $success_message = "Order placed successfully with Cash on Delivery! Order ID: #" . $_SESSION['cod_order_id'];
    unset($_SESSION['cod_order_id']);
}

$connection->close();
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Thambapanni Heritage - Cart</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    <script src="https://js.stripe.com/v3/"></script>
    <style>
        :root {
            --saffron: #FF9933;
            --green: #00843D;
            --maroon: #8C2A3C;
            --gold: #FFC107;
            --white: #FFFFFF;
            --gray: #F5F5F5;
            --dark-maroon: #5C1A28;
            --light-saffron: #FFDAB3;
            --shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Roboto', sans-serif;
            background: linear-gradient(135deg, var(--gray) 0%, var(--white) 100%);
            color: var(--dark-maroon);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .main-content {
            padding: 20px;
            width: 100%;
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
        }

        h1 {
            color: var(--maroon);
            font-size: 2rem;
            margin: 10px 0;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .content-sections {
            background: var(--white);
            border-radius: 15px;
            box-shadow: var(--shadow);
            padding: 20px;
        }

        .cart-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        .cart-table th, .cart-table td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid var(--light-saffron);
        }

        .cart-table th {
            background: var(--saffron);
            color: var(--dark-maroon);
        }

        .cart-table img {
            max-width: 50px;
            border-radius: 5px;
        }

        .remove-btn {
            background: var(--maroon);
            color: var(--white);
            padding: 5px 10px;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: var(--transition);
        }

        .remove-btn:hover {
            background: var(--dark-maroon);
        }

        .button-group {
            text-align: right;
        }

        button {
            background: var(--green);
            color: var(--white);
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: var(--transition);
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        button:hover {
            background: var(--gold);
            color: var(--dark-maroon);
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            text-align: center;
            border-radius: 5px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }

        .form-group {
            margin-bottom: 15px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        .submit-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 500;
        }

        .submit-btn:hover {
            background-color: #45a049;
        }

        h2 {
            margin-top: 0;
            margin-bottom: 20px;
            color: #333;
        }

        .success {
            background: var(--green);
            color: var(--white);
            padding: 12px;
            margin: 15px 0;
            border-radius: 8px;
            text-align: center;
        }

        .error {
            background: var(--light-saffron);
            color: var(--dark-maroon);
            padding: 12px;
            margin: 15px 0;
            border-radius: 8px;
            text-align: center;
        }

        @media (max-width: 768px) {
            .cart-table {
                font-size: 0.9rem;
            }
            button {
                width: 100%;
            }
        }
        * Header Navigation */
.nav {
    background: linear-gradient(to right, var(--maroon), var(--dark-maroon));
    padding: 25px;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    flex-wrap: wrap;
    position: sticky;
    top: 0;
    z-index: 1000;
    box-shadow: var(--shadow);
    transition: var(--transition);
}

.nav-toggle {
    display: none;
    font-size: 1.5rem;
    color: var(--white);
    background: none;
    border: none;
    cursor: pointer;
    padding: 10px;
}

.nav a {
    color: var(--maroon);
    text-decoration: none;
    font-size: 1rem;
    background-color: #ff9933;
    padding: 10px 20px;
    transition: var(--transition);
    border-radius: 25px;
    margin: 20px;
    
}

.nav a:hover {
    background: var(--gold);
    color: var(--dark-maroon);
}

    </style>
</head>
<body>
    <br>
    <div class="nav">
            <button class="nav-toggle" style="background-color: #ff9933"><i class="fas fa-bars"></i></button>
        
         <a href="shop.php">Back</a>
            
        </div>
    <div class="main-content">
        <div class="header">
            <h1>Your Cart</h1>
        </div>

        <?php if (isset($_GET['success'])) { ?>
            <div class="success"><?php echo htmlspecialchars($_GET['success']); ?></div>
        <?php } elseif (isset($_GET['error'])) { ?>
            <div class="error"><?php echo htmlspecialchars($_GET['error']); ?></div>
        <?php } elseif (isset($success_message)) { ?>
            <div class="success"><?php echo htmlspecialchars($success_message); ?></div>
        <?php } elseif (isset($error_message)) { ?>
            <div class="error"><?php echo htmlspecialchars($error_message); ?></div>
        <?php } ?>

        <div class="content-sections">
            <?php if (empty($cart_items)) { ?>
                <p>Your cart is empty.</p>
            <?php } else { ?>
                <table class="cart-table">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Type</th>
                            <th>Seller</th>
                            <th>Price (LKR)</th>
                            <th>Quantity</th>
                            <th>Total</th>
                            <th>Image</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php $grand_total = 0; ?>
                        <?php foreach ($cart_items as $item) { ?>
                            <tr>
                                <td><?php echo htmlspecialchars($item['item_name']); ?></td>
                                <td><?php echo htmlspecialchars($item['type']); ?></td>
                                <td><?php echo htmlspecialchars($item['seller_username']); ?></td>
                                <td><?php echo number_format($item['price'], 2); ?></td>
                                <td><?php echo htmlspecialchars($item['quantity']); ?></td>
                                <td><?php echo number_format($item['price'] * $item['quantity'], 2); ?></td>
                                <td>
                                    <?php if ($item['type'] === 'product' && !empty($item['product_image'])) { ?>
                                        <img src="<?php echo htmlspecialchars($item['product_image']); ?>" alt="Product Image">
                                    <?php } elseif ($item['type'] === 'gig' && !empty($item['gig_image'])) { ?>
                                        <img src="<?php echo htmlspecialchars($item['gig_image']); ?>" alt="Gig Image">
                                    <?php } else { ?>
                                        <div>No Image</div>
                                    <?php } ?>
                                </td>
                                <td>
                                    <form method="POST" style="display:inline;">
                                        <input type="hidden" name="cart_id" value="<?php echo $item['id']; ?>">
                                        <button type="submit" name="remove_item" class="remove-btn">
                                            <i class="fas fa-trash-alt"></i> Remove
                                        </button>
                                    </form>
                                </td>
                            </tr>
                            <?php $grand_total += $item['price'] * $item['quantity']; ?>
                        <?php } ?>
                        <tr>
                            <td colspan="5" style="text-align: right;"><strong>Grand Total:</strong></td>
                            <td><strong>LKR <?php echo number_format($grand_total, 2); ?></strong></td>
                            <td colspan="2"></td>
                        </tr>
                    </tbody>
                </table>
                <div class="button-group">
                    <button type="button" id="checkout-button">Proceed to Checkout <i class="fas fa-credit-card"></i></button>
                </div>
            <?php } ?>
        </div>
    </div>

    <!-- Shipping details and payment method modal -->
    <div id="shipping-modal" class="modal">
        <div class="modal-content">
            <span class="close" id="closeShippingModal">×</span>
            <h2>Shipping Details & Payment</h2>
            <form id="shipping-form">
                <div class="form-group">
                    <label for="full_name">Full Name:</label>
                    <input type="text" id="full_name" name="full_name" required>
                </div>
                <div class="form-group">
                    <label for="address">Address:</label>
                    <textarea id="address" name="address" required></textarea>
                </div>
                <div class="form-group">
                    <label for="city">City:</label>
                    <input type="text" id="city" name="city" required>
                </div>
                <div class="form-group">
                    <label for="postal_code">Postal Code:</label>
                    <input type="text" id="postal_code" name="postal_code" required>
                </div>
                <div class="form-group">
                    <label for="phone">Phone Number:</label>
                    <input type="tel" id="phone" name="phone" required>
                </div>
                <div class="form-group">
                    <label for="payment_method">Payment Method:</label>
                    <select id="payment_method" name="payment_method" required>
                        <option value="">Select Payment Method</option>
                        <option value="stripe">Credit/Debit Card (Stripe)</option>
                        <option value="cod">Cash on Delivery</option>
                    </select>
                </div>
                <button type="submit" class="submit-btn">Confirm Order</button>
            </form>
        </div>
    </div>

    <div id="message-modal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close">×</span>
            <p id="message-text"></p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const checkoutButton = document.getElementById('checkout-button');
            const shippingModal = document.getElementById('shipping-modal');
            const closeShippingModal = document.getElementById('closeShippingModal');
            const shippingForm = document.getElementById('shipping-form');
            const stripe = Stripe('');

            if (checkoutButton) {
                checkoutButton.addEventListener('click', function() {
                    shippingModal.style.display = 'block';
                });
            }

            closeShippingModal.onclick = function() {
                shippingModal.style.display = 'none';
            };

            window.onclick = function(event) {
                if (event.target == shippingModal) {
                    shippingModal.style.display = 'none';
                }
                if (event.target == document.getElementById('message-modal')) {
                    document.getElementById('message-modal').style.display = 'none';
                    window.location.href = 'cart.php';
                }
            };

            if (shippingForm) {
                shippingForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = new FormData(shippingForm);
                    formData.append('action', 'create_checkout');
                    
                    fetch('cart.php', {
                        method: 'POST',
                        body: new URLSearchParams(formData)
                    })
                    .then(response => {
                        return response.text().then(text => {
                            try {
                                const data = JSON.parse(text);
                                return data;
                            } catch (e) {
                                console.error("JSON parse error:", e);
                                console.log("Raw response:", text);
                                throw new Error('Server returned invalid JSON: ' + text.substring(0, 100));
                            }
                        });
                    })
                    .then(data => {
                        if (data.error) {
                            showModal(data.error, true);
                        } else if (data.sessionId) {
                            // Stripe payment
                            stripe.redirectToCheckout({ sessionId: data.sessionId });
                        } else if (data.success) {
                            // COD success
                            showModal(data.success, false);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showModal('An error occurred: ' + error.message, true);
                    });
                });
            }

            <?php if (isset($success_message)) { ?>
                showModal(<?php echo json_encode($success_message); ?>, false);
            <?php } elseif (isset($error_message)) { ?>
                showModal(<?php echo json_encode($error_message); ?>, true);
            <?php } ?>

            function showModal(message, isError) {
                const modal = document.getElementById('message-modal');
                const messageText = document.getElementById('message-text');
                messageText.textContent = message;
                messageText.style.color = isError ? 'red' : 'green';
                modal.style.display = 'block';

                const closeBtn = modal.querySelector('.close');
                closeBtn.onclick = function() {
                    modal.style.display = 'none';
                    if (!isError) {
                        window.location.href = 'cart.php';
                    }
                };
            }
        });
    </script>
</body>
</html>